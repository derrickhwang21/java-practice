import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;


/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {

        /**
         * Default test condition to still make sure the gradle test is still running properly
         */
//        System.out.println(new App().getGreeting());

        /**
         * "Class File"
         *  An abstract representation of file and directory pathnames
         *
         *
         * The "BufferedImage subclass
         *  describes an Image with an accessible buffer of image data.
         *  A BufferedImage is comprised of a ColorModel and a Raster of image data.
         *  The number and types of bands in the SampleModel of the Raster must match the number and types required by the ColorModel to represent its color and alpha componentss.
         *  All BufferedImage objects have an upper left corner coordinate of (0,0)
         *  Any Raster used to construct a BufferedImage must therefore have minX=0 and minY=0
         *
         *  See Also: ColorModel, Raster, WritableRaster
         *
         * "ImageIO.write"
         *  Method which calls the code that implements image file type writing a "PNG writer plug-in"
         *  The term plug-in is used since Image I/O is extensible and can support a widre range of formats
         *
         * "ByteArrayOutputStream"
         *  This class implements an output stream in which the data is written into a byte array
         *  ex: public ByteArrayOutputStream(int size)
         *
         * ".flush()"
         *  java.io.Writer.flush() method flushes the stream
         *  If the stream has saved any characters from the various write() methods in a buffer, write them immediately to their intended destination
         *
         * "toByteArray"
         *  Creates a newly allocated byte array.
         *  Its size is the current size of this output stream and the valid contents of the buffer have been copied into it
         *  Returns: the current contents of this output stream, as a byte array
         *  ex: public byte[] toByteArray()
         *  Class: ByteArrayOutputStream
         *
         *  See Also: size()
         *
         * Step 1: create java.io.File object (Potentially deprecated)
         * Step 2: read the image using ImageIO.read() method into BufferedImage object
         * Step 3: Write the image into local disc using ImageIO.write() method by passing the desired format
         * Step 4: implement at output stream to convert data to byte array declared "file array"
         */

        Path imagePath = FileSystems.getDefault().getPath("resources", "test.bmp");

        Bitmap bmp = new Bitmap(imagePath);

        bmp.flipHorizontally();

        bmp.save(FileSystems.getDefault().getPath("resources", "test_after.bmp"));


    }

}
