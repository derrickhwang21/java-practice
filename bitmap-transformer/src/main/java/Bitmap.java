import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Bitmap {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {

        /**
         * Default test condition to still make sure the gradle test is still running properly
         */
//        System.out.println(new App().getGreeting());

        /**
         * "Class File"
         *  An abstract representation of file and directory pathnames
         *
         *
         * The "BufferedImage subclass
         *  describes an Image with an accessible buffer of image data.
         *  A BufferedImage is comprised of a ColorModel and a Raster of image data.
         *  The number and types of bands in the SampleModel of the Raster must match the number and types required by the ColorModel to represent its color and alpha componentss.
         *  All BufferedImage objects have an upper left corner coordinate of (0,0)
         *  Any Raster used to construct a BufferedImage must therefore have minX=0 and minY=0
         *
         *  See Also: ColorModel, Raster, WritableRaster
         *
         *  "ImageIO.write"
         *  Method which calls the code that implements image file type writing a "PNG writer plug-in"
         *  The term plug-in is used since Image I/O is extensible and can support a widre range of formats
         *
         * Step 1: create java.io.File object (Potentially deprecated)
         * Step 2: read the image using ImageIO.read() method into BufferedImage object
         * Step 3: Write the image into local disc using ImageIO.write() method by passing the desired format
         */

        // potentially deprecated code to read bmp file
        File image = new File("test.bmp");

        BufferedImage imageFile = null;
        try{
            imageFile = ImageIO.read(new File("test.bmp"));
//            ImageIO.write(imageFile, "bmp", new File("test.bmp"));
        }
        catch (IOException e){

        }

        int imageHeight = imageFile.getHeight();
        int imageWidth = imageFile.getWidth();

        int amountOfPixel = 0;
        int amountOfBlackPixel = 0;

        int rgb;
        int red;
        int green;
        int blue;

        System.out.println(imageHeight + " " + imageWidth + " " );

    }
}
